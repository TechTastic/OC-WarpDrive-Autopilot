local pl = require("autopilot/planet-list")
local nc = require("autopilot/navConf")
local comp = require("component")
local serial = require("serialization")
local term = require("term")
local event = require("event")
local kb = require("keyboard")

local wcon = comp.warpdriveShipController
local data = comp.data

--Custom Functions

function filter(key)
	if key == "key_down" then
		if kb.isKeyDown(0x1C) then
			return true
		else
			return false
		end
	else
		return false
	end
end

function confNav()
	if nc[2] == "new" then
		term.write("List of Planets:\n")
		for k, v in pairs{pl} do
			for j, c in pairs(v) do
				term.write(j .. "\n")
			end
		end
		term.write("What is the destination? (ilum, dagobah, yarvin4, etc.) OR [coords]\n")
		local dest = term.read()
		local planet = ""
		for k, v in pairs(pl) do
			for j, c in pairs(v) do
				if dest == j then
					planet = j
				end
			end
		end
		local xDest
		local zDest
		if planet == "" then
			term.write("Where do you want to go exactly?\nX: ")
			xDest = tonumber(term.read())
			while (xDest < -30000) or (xDest > 30000) do
				term.write("Cannot be over 30K or under -30K\nX: ")
				xDest = tonumber(term.read())
			end
			term.write("Z: ")
			zDest = tonumber(term.read())
			while (zDest < -30000) or (zDest > 30000) do
				term.write("Cannot be over 30K or under -30K\nZ: ")
				zDest = tonumber(term.read())
			end
		else
			local planet = pl[1]
			local planet = pl[j]
			xDest = planet[1]
			zDest = planet[2]
		end
		nc[2] = xDest
		nc[3] = zDest
	end
	if nc[4] == nil then
		local mass, _ = wcon.getShipSize()
		if mass >= 3000 then
			term.write("Should we utilize Hyperspace?\n [y/N]")
			local hyper = term.read()
			if hyper == "y" or hyper == "Y" then
				nc[4] = true
			else
				nc[4] = false
			end
		else
			nc[4] = false
		end
	end
	if wcon.isInSpace() then
		nc[5] = "space"
	elseif wcon.isInHyperspace() then
		nc[5] = "hyper"
	else
		nc[5] = "planet"
	end
	local navConf = io.open("/lib/autopilot/navConf.lua", "w")
	navConf:write("return " .. serial.serialize(nc))
	navConf:close(navConf)
end

function move(table)
	wcon.movement(table[1], table[2], table[3])
	wcon.command(table[4])
	wcon.enable(true)
end

function chkCoord(dst, cur, jMax)
	local distance = dst - cur
	if distance == math.abs(distance) then
		if distance > jMax then
			distance = jMax
		end
	else
		if math.abs(distance) > jMax then
			distance = jMax * -1
		end
	end
	return distance
end

function main()
	local _, max = wcon.getMaxJumpDistance()
	local x, y, z, _ = wcon.position()
	local _, _, depthUp = wcon.dim_positive()
	local size, _ = wcon.getShipSize()

	local tShip = {x, y, z, size, depthUp}
	local tMove = {0, 0, 0, "MANUAL"}

	if tShip[1] == nc[2] then
		if tShip[3] == nc[3] then
			if nc[5] == "hyper" then
				tMove[4] = "HYPERDRIVE"
			else
				local file = io.open("/lib/autopilot/navConf.lua", "w")
				file:write("return {false,\"new\"}")
				term.write("You've reached your destination!\n\nProgram Made by TechTastic.\nResetting configurations...")
				os.sleep(5)
				os.execute{reboot}
			end
		else
			if nc[5] == "space" then
				if (tShip[2] - depthUp) < 255 then
					tMove[3] = max
				end
			elseif nc[5] == "planet" then
				tMove[3] = max
			end
		end
	else
		if nc[5] == "space" then
			if (tShip[2] - depthUp) < 255 then
				tMove[3] = max
			end
		elseif nc[5] == "planet" then
			tMove[3] = max
		end
		tMove[1] = chkCoord(nc[2], tShip[1], max)
		tMove[3] = chkCoord(nc[3], tShip[3], max)
	end
	move(tMove)
end

--Program Start

if not nc[1] then
	term.write("Starting WarpDrive normally...\n\nPress ENTER to enter Autopilot.\n")
	if event.pullFiltered(10, filter) then
		nc[1] = true
		local navConf = io.open("/lib/autopilot/navConf.lua", "w")
		navConf:write("return " .. serial.serialize(nc))
		navConf:close(navConf)
		confNav()
		main()
	else
		os.execute('/normal_wd')
	end
else
	confNav()
	main()
end
