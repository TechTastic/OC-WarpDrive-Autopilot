local nav = io.open("/navConf", "r")
local navConf = nav:read(3)
nav:close(nav)
if navConf == "new" then
  local pl = io.open("/planet_list", "r")
  local planets = serial.unserialize(pl:read("*all"))
  pl:close()
  term.write("List of Planets:\n")
  for k, v in pairs(planets) do
    term.write(planets[k] .. "\n")
  end
  term.write("Enter a planet name or say 'coords' [coords]\n")
  local tName = term.read()
  tPlanet = getPlanet(tName)
  if tPlanet ~= nil then
    target = tPlanet
  else
    term.write("Where are we going?\nX: ")
    tX = term.read()
    while tX > 30000 or tX < -30000 do
      term.write("The World Border is 60Kx60K, 30K radius")
      tX = term.read()
    end
    term.write("Y: ")
    tY = term.read()
    while tY > 30000 or tY < -30000 do
      term.write("The World Border is 60Kx60K, 30K radius")
      tY = term.read()
    end
    term.write("Z: ")
    tZ = term.read()
    while tZ > 30000 or tZ < -30000 do
      term.write("The World Border is 60Kx60K, 30K radius")
      tX = term.read()
    end
    target = {tX, tY, tZ}
  end
  local size, _ = wcon.getShipSize()
  if size >= 3000 then
    term.write("Should we utilize hyperspace? [Y/n]")
    local hyper = term.read()
    if hyper == "n" or hyper == "N" then
      target[4] = false
    else
      target[4] = true
    end
  else
    target[4] = false
  end
  if not wcon.isInSpace() then
    if not wcon.isInHyperspace() then
      target[5] = "planet"
    else
      target[5] = "hyper"
    end
  else
    target[5] = "space"
  end
  local nav = io.open("/navConf", "w")
  nav:write(serial.serialize(target))
  nav:close()
end
local nav = io.open("/navConf", "r")
local conf = nav:read("*all")
nav:close()
if conf == nil then
  os.execute("rm /navConf")
  os.execute(reboot)
end
local target = serial.unserialize(conf)
if target[5] == "planet" then
  local mass, _ = wcon.getShipSize()
  if mass > 3000 then
    term.write("This ship is too big to exit the planet. It needs to have 4500 blocks or lower.")
    while mass > 3000 do
      mass, _ = wcon.getShipSize()
      term.write("Current Size: " .. mass)
      os.sleep(1)
      os.execute(reboot)
    end
  elseif wcon.isInSpace() then
    target[5] = "space"
    local nav = io.open("/navConf", "w")
    nav:write(serial.serialize(target))
    nav:close()
  else
    wcon.movement(0, wcon.getMaxJumpDistance(), 0)
    wcon.command("MANUAL")
    wcon.enable(true)
  end
elseif target[5] == "space" and target ~= wcon.position() then
  if target[4] then
    wcon.movement(0, 0, 0)
    wcon.command("HYPERDRIVE")
    wcon.enable(true)
  end
end
local x, y, z = wcon.position()
dist = {target[1] - x, target[2] - y, target[3] - z}

if dist[1] ~= Math.abs(dist[1]) then
  local xJump = -1 * wcon.getMaxJumpDistance()
else
  local xJump = 1 * wcon.getMaxJumpDistance()
end
if dist[2] ~= Math.abs(dist[2]) then
  local yJump = -1 * wcon.getMaxJumpDistance()
else
  local yJump = 1 * wcon.getMaxJumpDistance()
end
if dist[3] ~= Math.abs(dist[3]) then
  local zJump = -1 * wcon.getMaxJumpDistance()
else
  local zJump = 1 * wcon.getMaxJumpDistance()
end

if Math.abs(dist[1]) < wcon.getMaxJumpDistance() then
  xJump = dist[1]
end
if Math.abs(dist[2]) < wcon.getMaxJumpDistance() then
  yJump = dist[2]
end
if Math.abs(dist[3]) < wcon.getMaxJumpDistance() then
  zJump = dist[3]
end
if x == target[1] then
  if z == target[3] then
    if wcon.isInHyperspace() then
      wcon.movement(0, 0, 0)
      wcon.command("HYPERDRIVE")
      wcon.enable(true)
    else
      term.write("You've arrived! Resetting configuration changes")
      local auto = io.open("/auto", "w")
      auto:write("false")
      auto:close()
      local nav = io.open("/navConf", "w")
      nav:write("new")
      nav:close()
      os.execute(reboot)
    end
  end
end
wcon.movement(xJump, yJump, zJump)
wcon.command("MANUAL")
wcon.enable(true)
