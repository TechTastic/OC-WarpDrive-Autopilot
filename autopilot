local component = require("component")
local event = require("event")
local term = require("term")
local serial = require("serialization")

local wcon = component.warpdriveShipController
local fs = component.filesystem
local kb = component.keyboard

-- CUSTOM FUNCTIONS

function calcDist(t, c)   --Calculates the distance from current to target; gives both negative and positive output
  return t - c
end

function maxJumpNum(d)    --Calculates the number of maximum jumps that can be made to reach a destination
	max = wcon.getMaxJumpDistance()
	r = d % max
	if r ~= 0 then
		if isNeg(r) then
			return Math.floor((d+r) / max)
		else
			return Math.floor((d-r) / max)
		end
	else
		return Math.floor(d / max)
	end
end

function isNeg(n)
	if n != Math.abs(n) then
		return true
	else
		return false
	end
end

function isAuto()      --IS Auto already on?
  if fs.exists("auto") then
    local file = io.open("auto", "r")
    str = fs.read(file, 5)
    fs.close()
    local bool = false
    if str == "true" then
      bool = true
    end
    return bool
  else
    os.execute('echo "false" > auto')
    os.execute(reboot)
  end
end

--ACTUAL PROGRAM START

if ~isAuto() then        --Checks for Autopilot
  term.write("Press ENTER to interrupt normal WD booting..."
  local i = 30
  while (i ~= 0) do
  	if keyboard.isKeyDown("enter") then
		break;
	end
	i = i - 1
	os.sleep(1)
  end
  if i == 0 then
    os.execute(normal_wd)
  else
    local file = io.open("auto", "w")
    fs.write(file, "true")
    fs.close()
    os.execute(reboot)
  end
else                    --Autopilot engaged
  if fs.exists("nav") then			--does nav file exist?
  	vNav = serial.unserialize(fs.read(io.open("nav", "r"), 32000))
  else
  	local temp = {"new"}			--new nav file
	local temp = serial.serialize(temp)
	local file = io.open("nav", "w")
	fs.write(file, temp)
	fs.close()
  end
  if vNav[1] == "new" then			--is nav configured?
  	term.write("Where do you want to go?\nX: ")
	local x = tonumber(term.read())
	if x < -30000 or x > 30000 then
		term.write("Enter a number thats WITHIN the world border!\nX: ")
		local x = tonumber(term.read())
	end
	term.write("Y: ")
	local y = tonumber(term.read())
	if y < 0 or y > 256 then
		term.write("Space still has a height limit...")
		local y = tonumber(term.read())
	end
	term.write("Z: ")
	local z = tonumber(term.read())
	if z < -30000 or z > 30000 then
		term.write("Enter a number thats WITHIN the world border!\nZ: ")
		local z = tonumber(term.read())
	end
	vNav = {x, y, z}
	local file = io.open("nav", "w")
	fs.write(file,serial.serialization(vNav))
	fs.close()
  end
  	local curX, curY, curZ = wcon.position()
	local curPos = {curX, curY, curZ}
	local dist = {vNav[1] - curPos[1], vNav[2] - curPos[2], vNav[3] - curPos[3]}
	for k,v in pairs(dist) do
		if v < wcon.getMaxJumpDistance then
			
		end
	end
  end
end


PSUEDO CODE

libraries

functions

does "auto" file exist
does "nav" file exist

is auto already?
	if not interrupt for auto or go to wd normal
